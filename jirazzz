#!/usr/bin/env bb

(ns jirazzz
  {:clj-kondo/config '{:linters
                       {:unresolved-symbol
                        {:exclude [(jirazzz/make-req-cmd)]}}}}
  (:require
    [babashka.fs :as fs]
    [cheshire.core :as json]
    [clojure.edn :as edn]
    [clojure.string :as string]
    [clojure.tools.cli :as cli]
    [org.httpkit.client :as http]
    [selmer.parser :as selmer]))


; cli utils
(defn warn
  [& args]
  (binding [*out* *err*]
    (println (apply str args))))


(defn exit
  [n]
  (System/exit n))


; config
(defn env
  [k]
  (-> k
      str
      System/getenv))


(def HOME (env "HOME"))


(def config-file
  (or (env "JIRAZZZ_CONFIG_FILE")
      (fs/path HOME ".jirazzz.edn")))


(def config-dir
  (-> config-file
      fs/parent
      str
      (as-> s
        (if (string/blank? s)
          "."
          s))))


(defn relative-to-config
  [p]
  (cond->> p
    (fs/relative? p) (fs/path config-dir)))


(def read-file
  (comp string/trim slurp str relative-to-config))


(def read-edn
  (partial edn/read-string {:readers {'env env
                                      'file read-file}}))


(def config
  (when (fs/exists? config-file)
    (-> config-file str slurp read-edn)))


(defn maybe-string
  [s]
  (when-not (string/blank? s)
    s))


(defn parse-json
  [json]
  (when json
    (json/parse-string json true)))


(def ->json json/generate-string)


(defn parse-string
  [opts s]
  (let [f (case (:input-format opts)
            :json parse-json
            edn/read-string)]
    (f s)))


(defn ->string
  [opts v]
  (let [f (case (:output-format opts)
            :json ->json
            pr-str)]
    (f v)))


(def ->nil (constantly nil))


(defn render-template
  [opts template]
  (-> (selmer/render template opts)
      (string/trim)))


(defn custom-fields
  [opts]
  (some->> (:custom-fields opts)
           (map (fn [[fname ffield]]
                  [ffield (get opts fname)]))
           (into {})))


(defn jira-url
  [opts path]
  (str (:url opts) path))


(defn jira-req
  [opts method path & [req-opts]]
  (let [json (some-> req-opts
                     :json
                     ->json)
        headers (cond-> (:headers opts)
                  json (assoc "Content-type" "application/json; charset=utf-8"))
        req (merge {:url (jira-url opts path)
                    :method method
                    :headers headers
                    :body json}
                   (dissoc req-opts :json))
        response @(http/request req)
        is-json? (some-> response
                         (get-in [:headers :content-type])
                         (->> (re-find #"/json")))]
    (when (= 401 (:status response))
      (throw (ex-info "401 Unauthorized; Check the headers in your config."
                      (select-keys response [:status]))))
    (-> response
        :body
        maybe-string
        (cond->
          is-json? parse-json)
        ; if there is no body return the whole response
        (or (dissoc response :opts :headers)))))


(defn get-sprint-id
  [opts]
  (let [sprints (-> (jira-req opts :get (str "/rest/greenhopper/1.0/sprintquery/" (:rapid-view opts)))
                    :sprints
                    (->> (remove #(= (:state %) "CLOSED"))))
        sprint-id (-> (or (-> sprints
                              (->> (filter #(= (:state %) "ACTIVE")))
                              first)
                          (-> sprints
                              first))
                      :id)]
    sprint-id))


(defn get-meta
  [{:keys [project issue-type] :as opts}]
  (let [issue-meta (jira-req opts :get "/rest/api/2/issue/createmeta" {:query-params {:projectKeys project}})
        proj (-> issue-meta
                 :projects
                 (->> (filter #(= (:key %) project)))
                 first)
        result {:project-id (:id proj)
                :type-id (-> proj
                             :issuetypes
                             (->> (filter #(= (:name %) issue-type)))
                             first
                             :id)}]
    (cond-> result
      (not (:backlog opts)) (assoc :sprint-id (get-sprint-id opts)))))


(defn jira-user
  [opts typ]
  (get opts typ "-1"))


(defn add-error
  [opts error]
  (-> opts
      (update :errors (fnil conj []) error)))


(defn transition
  [opts]
  (if-not (:transition opts)
    opts
    (let [issue (:issue opts)
          path (str "/rest/api/2/issue/" issue "/transitions")
          response (jira-req opts :get path)
          to (string/lower-case (:transition opts))
          t-id (-> response
                   :transitions
                   (->> (filter #(= (-> % :name string/lower-case)
                                    to)))
                   first
                   :id)]
      (if-not t-id
        (-> opts
            (add-error (str "transition '" to "' not found")))
        (do
          (jira-req opts
                    :post
                    path
                    {:json {:transition {:id t-id}}})
          opts)))))


(defn create-issue
  [opts]
  (let [response (jira-req
                   opts
                   :post
                   "/rest/api/2/issue"
                   {:json {:fields (merge
                                     (select-keys opts [:summary
                                                        :description])
                                     {:project {:id (:project-id opts)}
                                      :issuetype {:id (:type-id opts)}
                                      :assignee {:name (jira-user opts :assignee)}}
                                     (custom-fields opts))}})
        ky (:key response)
        opts (-> opts
                 (assoc :issue ky)
                 (cond->
                   (not ky) (add-error response)))]
    (transition opts)))


; commands
(defmacro make-req-cmd
  [verb & [weight]]
  `(defn ~(symbol (str "$" verb))
     {:command (quote ~verb)
      :doc ~(format "Send %-6s request: jirazzz %-6s /rest/api/x/y/z …"
                    (string/upper-case (str verb))
                    (str verb))
      :sort ~(or weight 2)}
     [opts path data]
     (let [argmap (or (some->> data (parse-string opts))
                      {})
           response (jira-req opts ~(keyword verb) path argmap)
           is-json? (-> response
                        (get-in [:headers :content-type])
                        (->> (re-find #"/json")))]
       (println (-> response
                    (dissoc :headers)
                    (cond->
                      is-json? (update :body parse-json))
                    ->string)))))


(make-req-cmd get)
(make-req-cmd post)
(make-req-cmd put)
(make-req-cmd delete 3)


(defn assign
  {:command 'assign
   :doc "Set assignee on issue: jirazzz assign --issue ABC-123 username"}
  [opts & [assignee]]
  (jira-req opts
            :put
            (str "/rest/api/2/issue/" (:issue opts) "/assignee")
            {:json {:name (or assignee
                              (:assignee opts))}}))


(defn $transition
  {:command 'transition
   :doc "Transition issue: jirazzz transition --issue ABC-123 --transition 'done'"}
  [opts & [to]]
  (-> opts
      (cond->
        to (assoc :transition to))
      transition))


(defn create
  {:command 'create
   :doc "Create issue: jirazzz create --summary … --description …"}
  [opts]
  (-> opts
      create-issue
      :issue))


(defn issue
  {:command 'issue
   :doc "Get issue: jirazzz issue KEY"}
  [opts & [ky]]
  (-> opts
      (jira-req :get (str "/rest/api/2/issue/" (or ky
                                                   (:issue opts))))))


(defn issue-pattern
  [opts]
  (-> opts
      :issue-pattern
      (or "([A-Z]+-[0-9]+)")
      re-pattern))


(defn commit-msg
  {:command 'commit-msg
   :doc "Create issue from commit msg if no reference exists"}
  [opts path]
  (let [contents (slurp path)]
    (when-not (re-find (issue-pattern opts) contents)
      (let [lines (string/split-lines contents)
            summary (first lines)
            description (string/join "\n" (drop-while string/blank? (rest lines)))
            opts (-> opts
                     (assoc :summary summary :description description))
            opts (create-issue opts)
            template (-> opts
                         :commit-template
                         (or "{{summary}}\n\ncloses {{issue}}\n\n{{description}}"))]
        (if-not (:issue opts)
          (warn (:errors opts))
          (spit path
                (render-template opts template)))))))


(defn parse-log
  {:command 'parse-log
   :doc "Parse commit log and transition referenced issues"}
  [opts]
  (-> *in*
      slurp
      (->> (re-seq (issue-pattern opts))
           (map second)
           set
           (map #(-> opts
                     (assoc :issue %)
                     transition
                     :issue)))))


(def cli-options
  (concat
    [["-h" "--help" "Show usage"]

     [nil  "--assignee USERNAME" "Assign issue to username (-1 for unassigned)"]
     [nil  "--backlog" "Put isue in backlog instead of current sprint"]
     [nil  "--description DESC" "Issue description"]
     ["-i" "--issue KEY" "Issue Key"]
     ["-p" "--project PROJECT" "Project for issue creation"]
     [nil  "--rapid-view ID" "RapidView id"]
     [nil  "--summary SUMMARY" "Issue summary"]
     [nil  "--transition NAME" "Transition issue to this state"]
     [nil  "--type TYPE" "Issue Type"]
     [nil  "--url URL" "Jira URL"]

     [nil  "--input-format FORMAT" "Set input format (can be 'json', default is 'edn')"
      :parse-fn keyword]
     [nil  "--output-format FORMAT" "Set output format (can be 'json', default is 'edn')"
      :parse-fn keyword]]
    (-> config
        :custom-fields
        (or {})
        (->> (map (fn [[k v]]
                    (let [k (name k)]
                      [nil
                       (str "--" k " VALUE")
                       (str "Set custom field for " k " (" (name v) ")")])))))))


(defn commands
  []
  (-> (ns-publics *ns*)
      vals
      (->> (map #(vector (-> % meta :command) %))
           (filter first)
           (into {}))))


(defn usage
  [{:keys [errors summary]}]
  (->> [errors
        "Usage: jirazzz command [options]"
        ""
        "Commands:"
        ""
        (for [[cmd v] (sort-by (juxt #(-> % second meta :sort) first) (commands))]
          (format "  %-12s %s" cmd (-> v meta :doc)))
        ""
        (str "Options can be specified on the command line or in " config-file)
        "Any aliases defined in {:custom-fields {:your-name :customfield_00000}}"
        "can also be set in the config file or on the command line (see below)."
        ""
        "Options:"
        summary]
       (flatten)
       (filter identity)
       (string/join "\n")))


; main
(defn parse-args
  [args]
  (let [parsed (cli/parse-opts args cli-options)
        args (-> parsed :arguments)
        cmdname (some-> args first symbol)
        cmd (get (commands) cmdname)
        args (rest args)]
    (when (-> parsed :options :help)
      (warn (usage parsed))
      (exit 0))
    (when-not cmd
      (when cmdname
        (warn "Unknown command: " cmdname))
      (warn (usage parsed))
      (exit 1))
    (let [opts (merge config (:options parsed))
          opts (merge (get-meta opts) opts)]
      [cmd opts args])))


(defn -main
  [& args]
  (try
    (let [[cmd opts args] (parse-args args)]
      (->> (apply cmd opts args)
           (->string opts)
           println))
    (catch Exception e
      (if (-> e
              ex-data
              :status)
        (do
          (warn (.getMessage e))
          (exit 1))
        (throw e)))))


(apply -main *command-line-args*)
